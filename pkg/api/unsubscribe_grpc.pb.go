// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: unsubscribe.proto

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UnsubscribeServiceClient is the client API for UnsubscribeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UnsubscribeServiceClient interface {
	Unsubscribe(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type unsubscribeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUnsubscribeServiceClient(cc grpc.ClientConnInterface) UnsubscribeServiceClient {
	return &unsubscribeServiceClient{cc}
}

func (c *unsubscribeServiceClient) Unsubscribe(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/UnsubscribeService/Unsubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UnsubscribeServiceServer is the server API for UnsubscribeService service.
// All implementations must embed UnimplementedUnsubscribeServiceServer
// for forward compatibility
type UnsubscribeServiceServer interface {
	Unsubscribe(context.Context, *AccountRequest) (*empty.Empty, error)
	mustEmbedUnimplementedUnsubscribeServiceServer()
}

// UnimplementedUnsubscribeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUnsubscribeServiceServer struct {
}

func (UnimplementedUnsubscribeServiceServer) Unsubscribe(context.Context, *AccountRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedUnsubscribeServiceServer) mustEmbedUnimplementedUnsubscribeServiceServer() {}

// UnsafeUnsubscribeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UnsubscribeServiceServer will
// result in compilation errors.
type UnsafeUnsubscribeServiceServer interface {
	mustEmbedUnimplementedUnsubscribeServiceServer()
}

func RegisterUnsubscribeServiceServer(s grpc.ServiceRegistrar, srv UnsubscribeServiceServer) {
	s.RegisterService(&UnsubscribeService_ServiceDesc, srv)
}

func _UnsubscribeService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UnsubscribeServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UnsubscribeService/Unsubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UnsubscribeServiceServer).Unsubscribe(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UnsubscribeService_ServiceDesc is the grpc.ServiceDesc for UnsubscribeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UnsubscribeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UnsubscribeService",
	HandlerType: (*UnsubscribeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unsubscribe",
			Handler:    _UnsubscribeService_Unsubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "unsubscribe.proto",
}
